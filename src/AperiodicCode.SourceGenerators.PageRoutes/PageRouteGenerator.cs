using Microsoft.CodeAnalysis;

namespace AperiodicCode.SourceGenerators.PageRoutes;

[Generator]
public class PageRouteGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        try
        {
            var sourceItems = context.AdditionalTextsProvider.Where(
                static file => file.Path.EndsWith(".razor", StringComparison.OrdinalIgnoreCase)
            );

            // read their contents and save their name
            var namesAndContents = sourceItems
                .Select(
                    (text, _) =>
                    {
                        var routes = text.GetText()
                            ?.Lines.Where(l => l.ToString().StartsWith("@page"))
                            .Select(l => l.ToString().Replace("@page", "").Replace("\"", "").Trim())
                            .ToList();

                        return (name: Path.GetFileNameWithoutExtension(text.Path), routes);
                    }
                )
                .WithComparer(PageRouteComparer.Instance);

            // generate a class that contains their values as const strings
            context.RegisterSourceOutput(
                namesAndContents,
                (sourceContext, nameAndContent) =>
                {
                    if (nameAndContent.routes is null || !nameAndContent.routes.Any())
                    {
                        return;
                    }

                    var routeData = nameAndContent.routes.Select(route => new RouteData(nameAndContent.name, route)).ToList();

                    var page = ProcessPage(nameAndContent.name, routeData);

                    sourceContext.AddSource($"Pages.{page.name}.g.cs", page.source);
                }
            );
        }
        catch (Exception e)
        {
            context.RegisterPostInitializationOutput(errorContext =>
            {
                errorContext.AddSource("Error.g.cs", $"/** {e} **/");
            });
        }
    }

    private static (string name, string source) ProcessPage(string pageName, List<RouteData> routeData)
    {
        var source = $$"""
        // <auto-generated />
        #nullable enable

        public static partial class Pages
        {
        """;

        foreach (var route in routeData)
        {
            source += $"{route.GetUrlDeclaration()}";
        }

        source = source.TrimEnd().TrimEnd('\r', '\n');

        source +=
            @"
}
";

        return (pageName, source);
    }
}
